#!/usr/bin/env ruby

USAGE = <<EOS
Usage: git update-feature-branch <branch> [remote-branch]

<branch>        - Mandatory. This is your local branch. 
[remote-branch] - Optional.  This is the remote branch on origin. If not provided this script will use "origin/branch".
                             Next version will provide the possibility to use arbitrary remotes.

  -h, --help     shows this information
  --continue     Continues the script after interrupting due to e.g. conflict-solving. (Also next version.)

This script is idempotent. If it fails, e.g. because of conflicts, 
you can simply rerun it.

Using the cool rebasing with git, feature-branches in collaboration can get tricky if you want to keep your work up-to-date with master.
This script takes care of this.
First it rebases your local-, and the remote-branch, with master.
Second it rebases your branch with the local copy and deletes the copy.

Thank you, for using Gnyp-Soft.
EOS

require 'git_update_feature_branch'


# Checking for illegal args
if ARGV.empty? or ARGV.delete("--help") or ARGV.delete("-h")
  puts USAGE
  exit 0
end

ARGV.each { |a| abort "Error: unknown argument #{a}." if a =~ /^--/ }

base = Base.new
base.run

=begin
branch = nil
origin_branch=nil
ARGV.each_with_index { |a, i| 
  if i == 0
    branch=a 
  end
    origin_branch="origin/#{branch}"
  if i == 1
    origin_branch="origin/#{a}"
  end
}
puts "Working with \'#{branch}\'"
puts "Remote branch \'#{origin_branch}\'"

# Testing if according branch exists and is a good one
if branch == "master"
  puts "Using master as a feature branch is not permitted!"
  exit 1
end 
checkout_branch branch

# checking for a dirty directory
puts "Checking wc clean ..."
out = `git status --porcelain` ; suc = $?.success?
if out.length > 0 
  puts "You seem to have a dirty directory. Please commit or stage your changes and start over."
  exit 1
end unless !suc

# 1. Step - checkout master and get latest version
puts "Pulling master and rebasing your feature-branch..."
checkout_branch "master"
exec_git "git fetch","Could not fetch."
exec_git "git pull origin master", "Could not pull master"

checkout_branch branch
exec_git "git rebase master", "Rebasing your bransch \'#{branch}\' with master failed. Could not update your work."

# Step 2 - Updating remote feature-branch to our master 
puts "Rebasing feature-branch from origin onto local master ..."
updated_origin_branch="#{branch}_from_origin"
exec_git "git checkout #{origin_branch}","Could not checkout #{origin_branch}"
exec_git "git rebase master","Error..."
exec_git "git branch -f #{updated_origin_branch}","Could not create tempory branch #{updated_origin_branch}"
exec_git "git checkout #{updated_origin_branch}","Could not checkout tempory branch #{updated_origin_branch}"

# Step 3 - Rebasing our work to origin feature-branch
puts "Rebasing lokal feature-branch with origin ..."
checkout_branch branch
exec_git "git rebase #{updated_origin_branch}","Step 3 - Could not rebase with remote-branch."
exec_git "git branch -D #{updated_origin_branch}","Step 3 - Could not delete temporary branch #{updated_origin_branch}"

puts
puts "Successfully updated your feature-branch '#{branch}'."
exit 0
=end
